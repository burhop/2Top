============================= test session starts =============================
platform win32 -- Python 3.10.11, pytest-8.3.5, pluggy-1.6.0 -- C:\Users\markb\AppData\Local\Programs\Python\Python310\python.exe
cachedir: .pytest_cache
rootdir: C:\repos\2Top
plugins: anyio-3.7.1, hydra-core-1.3.2, langsmith-0.3.18, mock-3.14.0
collecting ... collected 1 item

tests/test_area_region.py::TestAreaRegionSerialization::test_serialization_round_trip FAILED [100%]

================================== FAILURES ===================================
__________ TestAreaRegionSerialization.test_serialization_round_trip __________
tests\test_area_region.py:397: in test_serialization_round_trip
    assert original.contains(x, y) == reconstructed.contains(x, y)
E   assert True == False
E    +  where True = contains(0, 0)
E    +    where contains = AreaRegion(outer_boundary=CompositeCurve(segments=[TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): y + 3 = 0>, mask=<function create_square_from_edges.<locals>.<lambda> at 0x000001DCD8E2A320>), TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): x - 3 = 0>, mask=<function create_square_from_edges.<locals>.<lambda> at 0x000001DCF22AD510>), TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): y - 3 = 0>, mask=<function create_square_from_edges.<locals>.<lambda> at 0x000001DCF22AC820>), TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): x + 3 = 0>, mask=<function create_square_from_edges.<locals>.<lambda> at 0x000001DCF240F9A0>)]), holes=[CompositeCurve(segments=[TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): y + 2 = 0>, mask=<function create_square_from_edges.<locals>.<lambda> at 0x000001DCF240FA30>), TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): x + 1 = 0>, mask=<function create_square_from_edges.<locals>.<lambda> at 0x000001DCF240FAC0>), TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): y + 1 = 0>, mask=<function create_square_from_edges.<locals>.<lambda> at 0x000001DCF240FB50>), TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): x + 2 = 0>, mask=<function create_square_from_edges.<locals>.<lambda> at 0x000001DCF240FBE0>)]), CompositeCurve(segments=[TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): y - 1 = 0>, mask=<function create_square_from_edges.<locals>.<lambda> at 0x000001DCF240FC70>), TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): x - 2 = 0>, mask=<function create_square_from_edges.<locals>.<lambda> at 0x000001DCF240FD00>), TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): y - 2 = 0>, mask=<function create_square_from_edges.<locals>.<lambda> at 0x000001DCF240FD90>), TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): x - 1 = 0>, mask=<function create_square_from_edges.<locals>.<lambda> at 0x000001DCF240FE20>)])]).contains
E    +  and   False = contains(0, 0)
E    +    where contains = AreaRegion(outer_boundary=CompositeCurve(segments=[TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): y + 3 = 0>, mask=<function TrimmedImplicitCurve._reconstruct_mask_function.<locals>.rectangular_mask at 0x000001DCF240FEB0>), TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): x - 3 = 0>, mask=<function TrimmedImplicitCurve._reconstruct_mask_function.<locals>.rectangular_mask at 0x000001DCF240FF40>), TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): y - 3 = 0>, mask=<function TrimmedImplicitCurve._reconstruct_mask_function.<locals>.rectangular_mask at 0x000001DCF2438040>), TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): x + 3 = 0>, mask=<function TrimmedImplicitCurve._reconstruct_mask_function.<locals>.rectangular_mask at 0x000001DCF24380D0>)]), holes=[CompositeCurve(segments=[TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): y + 2 = 0>, mask=<function TrimmedImplicitCurve._reconstruct_mask_function.<locals>.rectangular_mask at 0x000001DCF24381F0>), TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): x + 1 = 0>, mask=<function TrimmedImplicitCurve._reconstruct_mask_function.<locals>.rectangular_mask at 0x000001DCF2438280>), TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): y + 1 = 0>, mask=<function TrimmedImplicitCurve._reconstruct_mask_function.<locals>.rectangular_mask at 0x000001DCF2438310>), TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): x + 2 = 0>, mask=<function TrimmedImplicitCurve._reconstruct_mask_function.<locals>.rectangular_mask at 0x000001DCF24383A0>)]), CompositeCurve(segments=[TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): y - 1 = 0>, mask=<function TrimmedImplicitCurve._reconstruct_mask_function.<locals>.rectangular_mask at 0x000001DCF2438430>), TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): x - 2 = 0>, mask=<function TrimmedImplicitCurve._reconstruct_mask_function.<locals>.rectangular_mask at 0x000001DCF24384C0>), TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): y - 2 = 0>, mask=<function TrimmedImplicitCurve._reconstruct_mask_function.<locals>.rectangular_mask at 0x000001DCF2438550>), TrimmedImplicitCurve(base_curve=<PolynomialCurve (degree 1): x - 1 = 0>, mask=<function TrimmedImplicitCurve._reconstruct_mask_function.<locals>.rectangular_mask at 0x000001DCF24385E0>)])]).contains
=========================== short test summary info ===========================
FAILED tests/test_area_region.py::TestAreaRegionSerialization::test_serialization_round_trip
============================== 1 failed in 1.84s ==============================
